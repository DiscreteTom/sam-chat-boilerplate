AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-chat-boilerplate

  SAM Template for WebSocket based LLM chat application
  using AWS API Gateway WebSocket API and Lambda.

Parameters:
  WebSocketAPIName:
    Type: String
    Default: SamChatWebSocketAPI
    Description: (Required) The name of the API Gateway WebSocket API.

Resources:
  # websocket api
  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref WebSocketAPIName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  WebSocketAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - OnChatRoute
      - OnConnectRoute
      - OnDefaultRoute
      - OnDisconnectRoute
    Properties:
      ApiId: !Ref WebSocketAPI
  WebSocketAPIProductionStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Production
      DeploymentId: !Ref WebSocketAPIDeployment
      ApiId: !Ref WebSocketAPI

  SessionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: SessionId
        Type: String

  # chat
  OnChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: chat
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnChatIntegration
  OnChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnChatFunction.Arn}/invocations
  OnChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: chat/
      Handler: app.handler
      Runtime: python3.12
      Timeout: 300
      Environment:
        Variables:
          SessionTableName: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:InvokeModelWithResponseStream"
              Resource:
                - "arn:aws:bedrock:*::foundation-model/*"
  OnChatPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnChatFunction
      Principal: apigateway.amazonaws.com

  # $connect
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnConnectIntegration
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: connect/
      Handler: app.handler
      Runtime: python3.9
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  # $disconnect
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnDisconnectIntegration
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: disconnect/
      Handler: app.handler
      Runtime: python3.9
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  # $default
  OnDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnDefaultIntegration
  OnDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDefaultFunction.Arn}/invocations
  OnDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: default/
      Handler: app.handler
      Runtime: python3.9
  OnDefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDefaultFunction
      Principal: apigateway.amazonaws.com

Outputs:
  WebSocketAPIEndpoint:
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref WebSocketAPI,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "WebSocketAPIProductionStage",
        ],
      ]
